ДЗ 33. Группа студентов

1) Создайте класс, описывающий человека (создайте метод, выводящий информацию о человеке).

2) На его основе создайте класс Студент (переопределите метод вывода информации).

3) Создайте класс Группа, экземпляр которого состоит из объектов класса Студент. Реализуйте методы добавления, удаления студента и метод поиска студента по фамилии.

Метод поиска студента должен возвращать именно экземпляр класса Студент, если студент находится в группе, иначе – None.

В методе удаления используйте результат метода поиска. Есть. нужно скомбинировать эти два метода;)

Определите для группы метод __str__() для возврата списка студентов в виде строки.

Ниже приведены заготовки, которые нужно дополнить.

Copy code
class Human:

    def __init__(self, gender, age, first_name, last_name):
        pass

    def __str__(self):
        pass


class Student(Human):

    def __init__(self, gender, age, first_name, last_name, record_book):
        pass

    def __str__(self):
        pass


class Group:

    def __init__(self, number):
        self.number = number
        self.group = set()

    def add_student(self, student):
        self.group.add(student)

    def delete_student(self, last_name):
        pass

    def find_student(self, last_name):
        pass

    def __str__(self):
        all_students = ''
        ...
        return f'Number:{self.number}\n {all_students} '


st1 = Student('Male', 30, 'Steve', 'Jobs', 'AN142')
st2 = Student('Female', 25, 'Liza', 'Taylor', 'AN145')
gr = Group('PD1')
gr.add_student(st1)
gr.add_student(st2)
print(gr)
assert str(gr.find_student('Jobs')) == str(st1), 'Test1'
assert gr.find_student('Jobs2') is None, 'Test2'
assert isinstance(gr.find_student('Jobs'), Student) is True, 'Метод поиска должен возвращать экземпляр'

gr.delete_student('Taylor')
print(gr)  # Only one student

gr.delete_student('Taylor')  # No error!


